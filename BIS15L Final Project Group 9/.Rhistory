knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library(GGally)
library(viridis)
options(scipen=999)
longitudinal <- readr::read_csv("data/oasis_longitudinal.csv")
xsectional <- readr::read_csv("data/oasis_cross-sectional.csv")
glimpse(longitudinal)
summary(longitudinal)
glimpse(xsectional)
summary(xsectional)
longitudinal <- janitor::clean_names(longitudinal)
xsectional <- janitor::clean_names(xsectional)
names(longitudinal)
names(xsectional)
xsectional %>%
ggplot(aes(x=age, fill= as.factor(age), alpha= 0.5))+
geom_bar()+
labs(title="Cross-Sectional Age Distribution",
x="Age",
y="Count")+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 7, ), plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=age, fill= as.factor(age), alpha = 0.5))+
geom_bar()+
labs(title="Longitudinal Age Distribution",
x="Age",
y="Count")+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 8), plot.title = element_text(hjust = .5),legend.position = "none")
xsectional %>%
ggplot(aes(x=ses, fill=as.factor(ses), alpha = 0.7))+
geom_bar()+
labs(title="Cross-Sectional Socioeconomic Status Distribution",
x="Socioeconomic Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
filter(ses != "NA") %>%
ggplot(aes(x=as.factor(ses), fill=as.factor(ses), alpha = 0.7))+
geom_bar()+
labs(title="Longitudinal Socioeconomic Status Distribution",
x="Socioeconomic Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
xsectional %>%
ggplot(aes(x=m_f, fill = m_f, alpha = 0.5))+
geom_bar()+
labs(title="Cross-Sectional Sex Distribution",
x="Sex",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=m_f, fill = m_f, alpha = 0.5))+
geom_bar()+
labs(title="Longitudinal Sex Distribution",
x="Sex",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
xsectional %>%
ggplot(aes(x=educ, fill = as.factor(educ), alpha = 0.5))+
geom_bar()+
labs(title="Cross-Sectional Education Status Distribution",
x="Education Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=educ, fill = as.factor(educ), alpha=0.5))+
geom_bar()+
labs(title="Longitudinal Education Status Distribution",
x="Education Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=group, fill = group, alpha=0.5))+
geom_bar()+
labs(title="Longitudinal Dementia Status Distribution",
x=NULL,
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
ggcorr(longitudinal, label = TRUE, label_size = 3, size = 4, hjust = 0.75)+
labs(title="Longitudinal Correlation Plot")+
theme(plot.title = element_text(hjust = 0.5))
ggcorr(xsectional, label = TRUE, label_size = 3)+
labs(title="Cross-Sectional Correlation Plot")+
theme(plot.title = element_text(hjust = .5))
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library("RColorBrewer")
library("paletteer")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library(GGally)
library(shiny)
library(shinydashboard)
options(scipen=999)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
library(here)
library(GGally)
library(shiny)
library(shinydashboard)
options(scipen=999)
longitudinal <- readr::read_csv("data/oasis_longitudinal.csv")
xsectional <- readr::read_csv("data/oasis_cross-sectional.csv")
glimpse(longitudinal)
summary(longitudinal)
glimpse(xsectional)
summary(xsectional)
longitudinal <- janitor::clean_names(longitudinal)
xsectional <- janitor::clean_names(xsectional)
names(longitudinal)
names(xsectional)
xsectional %>%
ggplot(aes(x=age, fill= as.factor(age), alpha= 0.5))+
geom_bar()+
labs(title="Cross-Sectional Age Distribution",
x="Age",
y="Count")+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 7, ), plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=age, fill= as.factor(age), alpha = 0.5))+
geom_bar()+
labs(title="Longitudinal Age Distribution",
x="Age",
y="Count")+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 8), plot.title = element_text(hjust = .5),legend.position = "none")
xsectional %>%
ggplot(aes(x=ses, fill=as.factor(ses), alpha = 0.7))+
geom_bar()+
labs(title="Cross-Sectional Socioeconomic Status Distribution",
x="Socioeconomic Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
filter(ses != "NA") %>%
ggplot(aes(x=as.factor(ses), fill=as.factor(ses), alpha = 0.7))+
geom_bar()+
labs(title="Longitudinal Socioeconomic Status Distribution",
x="Socioeconomic Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
xsectional %>%
ggplot(aes(x=m_f, fill = m_f, alpha = 0.5))+
geom_bar()+
labs(title="Cross-Sectional Sex Distribution",
x="Sex",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=m_f, fill = m_f, alpha = 0.5))+
geom_bar()+
labs(title="Longitudinal Sex Distribution",
x="Sex",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
xsectional %>%
ggplot(aes(x=educ, fill = as.factor(educ), alpha = 0.5))+
geom_bar()+
labs(title="Cross-Sectional Education Status Distribution",
x="Education Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=educ, fill = as.factor(educ), alpha=0.5))+
geom_bar()+
labs(title="Longitudinal Education Status Distribution",
x="Education Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=group, fill = group, alpha=0.5))+
geom_bar()+
labs(title="Longitudinal Dementia Status Distribution",
x=NULL,
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
ggcorr(longitudinal, label = TRUE, label_size = 3, size = 4, hjust = 0.75)+
labs(title="Longitudinal Correlation Plot")+
theme(plot.title = element_text(hjust = 0.5))
ggcorr(xsectional, label = TRUE, label_size = 3)+
labs(title="Cross-Sectional Correlation Plot")+
theme(plot.title = element_text(hjust = .5))
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBVMin & nWBV<= input$nWBVMax) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBVMin & nWBV<= input$nWBVMax) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(nWBV>=input$nWBVMin & nWBV<= input$nWBVMax) %>%
filter(age>=input$ageMin & age<= input$ageMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(nWBV>=input$nWBVMin & nWBV<= input$nWBVMax) %>%
filter(Age>=input$ageMin & Age<= input$ageMax) %>%
filter(group=='Demented' | group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
View(longitudinal)
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group=='Demented' | group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
