x="Age",
y="Count")+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme_classic()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 8), plot.title = element_text(hjust = .5),legend.position = "none")
xsectional %>%
ggplot(aes(x=ses, fill=as.factor(ses), alpha = 0.7))+
geom_bar()+
labs(title="Cross-Sectional Socioeconomic Status Distribution",
x="Socioeconomic Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
filter(ses != "NA") %>%
ggplot(aes(x=as.factor(ses), fill=as.factor(ses), alpha = 0.7))+
geom_bar()+
labs(title="Longitudinal Socioeconomic Status Distribution",
x="Socioeconomic Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
xsectional %>%
ggplot(aes(x=m_f, fill = m_f, alpha = 0.5))+
geom_bar()+
labs(title="Cross-Sectional Sex Distribution",
x="Sex",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=m_f, fill = m_f, alpha = 0.5))+
geom_bar()+
labs(title="Longitudinal Sex Distribution",
x="Sex",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
xsectional %>%
ggplot(aes(x=educ, fill = as.factor(educ), alpha = 0.5))+
geom_bar()+
labs(title="Cross-Sectional Education Status Distribution",
x="Education Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "C", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=educ, fill = as.factor(educ), alpha=0.5))+
geom_bar()+
labs(title="Longitudinal Education Status Distribution",
x="Education Status",
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
longitudinal %>%
group_by("subject_id") %>%
ggplot(aes(x=group, fill = group, alpha=0.5))+
geom_bar()+
labs(title="Longitudinal Dementia Status Distribution",
x=NULL,
y="Count")+
theme_classic()+
scale_fill_viridis(option = "D", discrete = TRUE)+
theme(plot.title = element_text(hjust = .5), legend.position = "none")
ggcorr(longitudinal, label = TRUE, label_size = 3, size = 4, hjust = 0.75)+
labs(title="Longitudinal Correlation Plot")+
theme(plot.title = element_text(hjust = 0.5))
ggcorr(xsectional, label = TRUE, label_size = 3)+
labs(title="Cross-Sectional Correlation Plot")+
theme(plot.title = element_text(hjust = .5))
n_wbv_xsectional <- xsectional %>%
filter(age!='NA' | n_wbv!='NA') %>%
ggplot(aes(x=age, y=n_wbv, color = cdr))+
scale_color_viridis(option = "B")+
geom_smooth(method = "lm")+
geom_point()+
theme_classic()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 8), plot.title = element_text(size = rel(1), hjust = 0.5))+
labs(title = "Distribution of Normalized Whole Brain Volume", x= "Age", y="Normalized Whole Brain Volume")
n_wbv_xsectional
xsectional %>% ##comparison of n_wbv between demented patients and age matched controls
group_by(as.factor(cdr)) %>%
ggplot(aes(x=as.factor(cdr),y=n_wbv,group=as.factor(cdr),color=as.factor(cdr),fill=as.factor(cdr),alpha=.5))+
geom_boxplot()+
geom_jitter()+#Could Exclude
theme_classic()+
theme(plot.title = element_text(hjust = .5),legend.position = "none")+
labs(title=" Normalized Whole Brain Volume vs Clinical Dementia Rating",
x="Clinical Dementia Rating",
y="Normalized Whole Brain Volume")+
scale_x_discrete(labels=c("NA" = "Young"))
xsectional %>% #Violin comparison of Demented vs Nondemented and age
filter(cdr!="NA", age>60) %>%
ggplot(aes(x = as.factor(cdr), y = age, group=cdr,color=as.factor(cdr))) +
geom_violin(aes(fill = as.factor(cdr),alpha=.5)) +
geom_boxplot(width = 0.2, alpha=1)+
theme_classic()+
labs(title="Age Distribution Between Groups",
x="CDR",
y="Age Distribution ")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")
longitudinal %>% #Comparison of education between demented participants and age matched controls
filter(age>60,group!="Converted",visit==1) %>%
group_by(group) %>%
ggplot(aes(x=group,y=educ,fill=group,color=group,alpha=.5))+
geom_boxplot()+
theme_classic()+
labs(title="Years of Education vs Dementia Status",
x=NULL,
y="Education")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")+
scale_x_discrete(labels=c("Nondemented" = "Non-Demented"))
longitudinal %>% #Comparison of ses between demented participants and age matched controls
filter(age>60,group!="Converted",ses!="NA",visit==1) %>%
group_by(group) %>%
ggplot(aes(x=group,y=ses,fill=group,color=group,alpha=.5))+
geom_boxplot()+
labs(title="SES vs Dementia Status",
x=NULL,
y="SES")+
theme_classic()+
theme(plot.title = element_text(hjust = .5),legend.position = "none")+
scale_x_discrete(labels=c("Nondemented" = "Non-Demented"))
longitudinal %>% #Comparison of MMSE and CDR
filter(visit==1 | visit==2,mmse!="NA") %>%
mutate(cdr = as.factor(cdr)) %>%
ggplot(aes(cdr, mmse, fill = cdr,color=cdr))+
geom_boxplot(alpha = 0.5) +
geom_jitter(aes(color = cdr),alpha = 0.7)+
theme_classic()+
labs(title= "Mini-Mental State Examination",
x="Clinical Dementia Rating",
y="Mini-Mental State Examination")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")
longitudinal %>% #Observing the change between visits in n_wbv of the Nondemented group
filter(group=="Nondemented") %>%
ggplot(aes(x=visit,y=n_wbv,color=subject_id))+
geom_point()+
geom_line()+
theme_classic()+
labs(title="Change in Normalized Whole Brain Volume Over Time (Non-Demented|CDR=0)",
x="Visit Number",
y="Normalized Whole Brain Volume")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")
longitudinal %>% #Observing the change between visits in n_wbv of the Demented group
filter(group=="Demented") %>%
ggplot(aes(x=visit,y=n_wbv,color=subject_id))+
geom_point()+
geom_line()+
theme_classic()+
labs(title="Change in Normalized Whole Brain Volume Over Time (Demented|CDR>0)",
x="Visit Number",
y="Normalized Whole Brain Volume")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")
longitudinal %>% #Observing the change between visits in n_wbv of the converted group
filter(group=="Converted") %>%
ggplot(aes(x=visit,y=n_wbv,color=subject_id))+
geom_point()+
geom_line()+
theme_classic()+
labs(title="Change in Normalized Whole Brain Volume Over Time (Converted)",
x="Visit Number",
y="Normalized Whole Brain Volume")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")
longitudinal %>% #Observing the change between visits in n_wbv of the Nondemented group with trend line
filter(group=="Nondemented") %>%
ggplot(aes(x=visit,y=n_wbv,group=group,color=subject_id))+
geom_point()+
geom_smooth(method="lm",se=TRUE)+
theme_classic()+
labs(title="Change in Normalized Whole Brain Volume Over Time (Nondemented)",
x="Visit Number",
y="Normalized Whole Brain Volume")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")
longitudinal %>% #Observing the change between visits in n_wbv of the Demented  group with trand line
filter(group=="Demented") %>%
ggplot(aes(x=visit,y=n_wbv,group=group,color=subject_id))+
geom_point()+
geom_smooth(method=lm,se=TRUE,fullrange=TRUE)+
theme_classic()+
labs(title="Change in Normalized Whole Brain Volume Over Time (Demented)",
x="Visit Number",
y="Normalized Whole Brain Volume")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")
longitudinal %>% #Observing the change between visits in n_wbv of the converted group with trend line and standard error
filter(group=="Converted") %>%
ggplot(aes(x=visit,y=n_wbv,group=group,color=subject_id))+
geom_point()+
geom_smooth(method=lm,se=TRUE,fullrange=TRUE)+
theme_classic()+
labs(title="Change in Normalized Whole Brain Volume Over Time (Converted)",
x="Visit Number",
y="Normalized Whole Brain Volume")+
theme(plot.title = element_text(hjust = .5),legend.position = "none")
ui <- dashboardPage(skin = "red",
dashboardHeader(title = "Predictors of Alzheimer's Disease from first visit",
titleWidth = 300),
dashboardSidebar(disable=T),
dashboardBody(
fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.6","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Lower bound of Age", choices = c("60", "70", "80")),
selectInput("AgeMax", "Upper bound of Age", choices = c("60", "70", "80", "90")),
textOutput("result"),
plotOutput("plot", width = "500px", height = "400px")
)
)
)
server <- function(input, output, session) {
totalDemented <- longitudinal %>%
filter(group=='Demented') %>%
nrow()
totalConverted <- longitudinal %>%
filter(group=='Converted') %>%
nrow()
#This gets the number of patients who fit the criteria
numpatients <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax)%>%
nrow()
})
#This gets the number of patients who fit the criteria and are converted
numconverted <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Converted') %>%
nrow()
})
#This gets the number of patients who fit the criteria and are demented
numdemented <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Demented') %>%
nrow()
})
#Prints out the output
output$result <- renderText({
c(numpatients(),"PATIENTS MEET LISTED SEARCH CRITERIA: ", numdemented(), "of the 64 patients with existing dementia had brain volumes and ages within these values. ", numconverted(), "of the 14 who did not have dementia but later converted to dementia had brain volumes and ages within these values.")
})
output$plot <- renderPlot({
longitudinal%>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group != 'Nondemented') %>%
ggplot(aes(x = group)) + geom_bar(fill = 'red', alpha = 0.65) + ylim(0, 75) + geom_text(stat='count', aes(label=..count..), vjust=-1) + labs(x = 'Group', y = 'Count')
})
# stop the app when closed
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "red",
dashboardHeader(title = "Predictors of Alzheimer's Disease from first visit",
titleWidth = 300),
dashboardSidebar(disable=T),
dashboardBody(
fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.6","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Lower bound of Age", choices = c("60", "70", "80")),
selectInput("AgeMax", "Upper bound of Age", choices = c("60", "70", "80", "90")),
textOutput("result"),
plotOutput("plot", width = "500px", height = "400px")
)
)
)
server <- function(input, output, session) {
totalDemented <- longitudinal %>%
filter(group=='Demented') %>%
nrow()
totalConverted <- longitudinal %>%
filter(group=='Converted') %>%
nrow()
#This gets the number of patients who fit the criteria
numpatients <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax)%>%
nrow()
})
#This gets the number of patients who fit the criteria and are converted
numconverted <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Converted') %>%
nrow()
})
#This gets the number of patients who fit the criteria and are demented
numdemented <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Demented') %>%
nrow()
})
#Prints out the output
output$result <- renderText({
c(numpatients(),"PATIENTS MEET LISTED SEARCH CRITERIA: ", numdemented(), "of the 64 patients with existing dementia had brain volumes and ages within these values. ", numconverted(), "of the 14 who did not have dementia but later converted to dementia had brain volumes and ages within these values.")
})
output$plot <- renderPlot({
longitudinal%>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group != 'Nondemented') %>%
ggplot(aes(x = group)) + geom_bar(fill = 'red', alpha = 0.65) + ylim(0, 75) + geom_text(stat='count', aes(label=..count..), vjust=-1) + labs(x = 'Group', y = 'Count')
})
# stop the app when closed
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "red",
dashboardHeader(title = "Predictors of Alzheimer's Disease from first visit",
titleWidth = 700),
dashboardSidebar(disable=T),
dashboardBody(
fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.6","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Lower bound of Age", choices = c("60", "70", "80")),
selectInput("AgeMax", "Upper bound of Age", choices = c("60", "70", "80", "90")),
textOutput("result"),
plotOutput("plot", width = "500px", height = "400px")
)
)
)
server <- function(input, output, session) {
totalDemented <- longitudinal %>%
filter(group=='Demented') %>%
nrow()
totalConverted <- longitudinal %>%
filter(group=='Converted') %>%
nrow()
#This gets the number of patients who fit the criteria
numpatients <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax)%>%
nrow()
})
#This gets the number of patients who fit the criteria and are converted
numconverted <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Converted') %>%
nrow()
})
#This gets the number of patients who fit the criteria and are demented
numdemented <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Demented') %>%
nrow()
})
#Prints out the output
output$result <- renderText({
c(numpatients(),"PATIENTS MEET LISTED SEARCH CRITERIA: ", numdemented(), "of the 64 patients with existing dementia had brain volumes and ages within these values. ", numconverted(), "of the 14 who did not have dementia but later converted to dementia had brain volumes and ages within these values.")
})
output$plot <- renderPlot({
longitudinal%>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group != 'Nondemented') %>%
ggplot(aes(x = group)) + geom_bar(fill = 'red', alpha = 0.65) + ylim(0, 75) + geom_text(stat='count', aes(label=..count..), vjust=-1) + labs(x = 'Group', y = 'Count')
})
# stop the app when closed
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "red",
dashboardHeader(title = "Predictors of Alzheimer's Disease from first visit",
titleWidth = 600),
dashboardSidebar(disable=T),
dashboardBody(
fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.6","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Lower bound of Age", choices = c("60", "70", "80")),
selectInput("AgeMax", "Upper bound of Age", choices = c("60", "70", "80", "90")),
textOutput("result"),
plotOutput("plot", width = "500px", height = "400px")
)
)
)
server <- function(input, output, session) {
totalDemented <- longitudinal %>%
filter(group=='Demented') %>%
nrow()
totalConverted <- longitudinal %>%
filter(group=='Converted') %>%
nrow()
#This gets the number of patients who fit the criteria
numpatients <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax)%>%
nrow()
})
#This gets the number of patients who fit the criteria and are converted
numconverted <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Converted') %>%
nrow()
})
#This gets the number of patients who fit the criteria and are demented
numdemented <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Demented') %>%
nrow()
})
#Prints out the output
output$result <- renderText({
c(numpatients(),"PATIENTS MEET LISTED SEARCH CRITERIA: ", numdemented(), "of the 64 patients with existing dementia had brain volumes and ages within these values. ", numconverted(), "of the 14 who did not have dementia but later converted to dementia had brain volumes and ages within these values.")
})
output$plot <- renderPlot({
longitudinal%>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group != 'Nondemented') %>%
ggplot(aes(x = group)) + geom_bar(fill = 'red', alpha = 0.65) + ylim(0, 75) + geom_text(stat='count', aes(label=..count..), vjust=-1) + labs(x = 'Group', y = 'Count')
})
# stop the app when closed
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(skin = "red",
dashboardHeader(title = "Predictors of Alzheimer's Disease from first visit",
titleWidth = 600),
dashboardSidebar(disable=T),
dashboardBody(
fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.6","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Lower bound of Age", choices = c("60", "70", "80")),
selectInput("AgeMax", "Upper bound of Age", choices = c("60", "70", "80", "90")),
textOutput("result"),
plotOutput("plot", width = "500px", height = "400px")
)
)
)
server <- function(input, output, session) {
totalDemented <- longitudinal %>%
filter(group=='Demented') %>%
nrow()
totalConverted <- longitudinal %>%
filter(group=='Converted') %>%
nrow()
#This gets the number of patients who fit the criteria
numpatients <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax)%>%
nrow()
})
#This gets the number of patients who fit the criteria and are converted
numconverted <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Converted') %>%
nrow()
})
#This gets the number of patients who fit the criteria and are demented
numdemented <-  reactive({longitudinal %>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group == 'Demented') %>%
nrow()
})
#Prints out the output
output$result <- renderText({
c(numpatients(),"PATIENTS MEET LISTED SEARCH CRITERIA: ", numdemented(), "of the 64 patients with existing dementia had brain volumes and ages within these values. ", numconverted(), "of the 14 who did not have dementia but later converted to dementia had brain volumes and ages within these values.")
})
output$plot <- renderPlot({
longitudinal%>%
filter(visit==1) %>%
filter(n_wbv>=input$nWBVMin & n_wbv<= input$nWBVMax) %>%
filter(age>=input$AgeMin & age<= input$AgeMax) %>%
filter(group != 'Nondemented') %>%
ggplot(aes(x = group)) + geom_bar(fill = 'red', alpha = 0.65) + ylim(0, 75) + geom_text(stat='count', aes(label=..count..), vjust=-1) + labs(x = 'Group', y = 'Count')
})
# stop the app when closed
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny); runApp('sudevapp.R')
runApp('sudevapp.R')
runApp('sudevapp.R')
runApp('sudevapp.R')
