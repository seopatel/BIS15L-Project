}
shinyApp(ui, server)
n_patients <- longitudinal%>%
filter(SES==2) %>%
nrow()
cat(n_patients,"fit listed criteria")
ui <- fluidPage(
selectInput("CDR", "Clinical Dementia Rating on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
longitudinal %>%
filter(Group == 'Demented' | Group == 'Converted') %>%
ggplot(aes(x = SES)) + geom_bar() + labs(title = "Distribution of people with dementia by socio economic status (SES)")
longitudinal %>%
filter(Group == 'Converted') %>%
ggplot(aes(x = Age)) + geom_bar() + labs(title = "Distribution of people with dementia by age")
longitudinal %>%
filter(Group == 'Demented' | Group == 'Converted') %>%
ggplot(aes(x = SES)) + geom_bar() + labs(title = "Distribution of people with dementia by socio economic status (SES)")
longitudinal %>%
filter(Group == 'Demented' | Group == 'Converted') %>%
ggplot(aes(x = Age)) + geom_bar() + labs(title = "Distribution of people with dementia by age")
ui <- fluidPage(
selectInput("CDR", "Clinical Dementia Rating on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("CDR", "Clinical Dementia Rating on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90", "100")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("CDR", "Clinical Dementia Rating on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90", "100")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("CDR", "Clinical Dementia Rating on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("CDR", "Clinical Dementia Rating on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("CDR", "Clinical Dementia Rating on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90", "100")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("CDR", "Clinical Dementia Rating on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82"),
selectInput("nWBVMax", "Upper bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82", ".84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
))
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82"),
selectInput("nWBVMax", "Upper bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82", ".84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result"),
))
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82"),
selectInput("nWBVMax", "Upper bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82", ".84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
))
ui <- fluidPage(
selectInput("nWBV", "Lower bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82"),
selectInput("nWBV", "Upper bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
))
ui <- fluidPage(
selectInput("nWBV", "Lower bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82"),
selectInput("nWBV", "Upper bound of normalized brain weight on first visit", choices=c(".7", ".72", ".74", ".76", ".78", ".8", ".82")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
))
ui <- fluidPage(
selectInput("nWBV", "Lower bound of normalized brain weight on first visit", choices=unique(longitudinal$CDR)),
selectInput("nWBV", "Upper bound of normalized brain weight on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("nWBV", "Lower bound of normalized brain weight on first visit", choices=c("0.7","0.72","0.74")),
selectInput("nWBV", "Upper bound of normalized brain weight on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("nWBV", "Lower bound of normalized brain weight on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBV", "Upper bound of normalized brain weight on first visit", choices=unique(longitudinal$CDR)),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("nWBV", "Lower bound of normalized brain weight on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBV", "Upper bound of normalized brain weight on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(CDR == input$CDR) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("nWBV", "Lower bound of normalized brain weight on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBV", "Upper bound of normalized brain weight on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBV & Age<= input$nWBV) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBV & Age<= input$nWBV) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("nWBV", "Lower bound of normalized brain weight on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBV", "Upper bound of normalized brain weight on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBV & nWBV<= input$nWBV) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBV & nWBV<= input$nWBV) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain weight on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain weight on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBVMin & nWBV<= input$nWBVMax) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBVMin & nWBV<= input$nWBVMax) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
cross_sectional <- readr::read_csv(here('data','oasis_cross-sectional.csv'))
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
if (!require("tidyverse")) install.packages('tidyverse')
longitudinal <- readr::read_csv(here('data','oasis_longitudinal.csv'))
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
if (!require("tidyverse")) install.packages('tidyverse')
longitudinal <- readr::read_csv(here('data','oasis_longitudinal.csv'))
cross_sectional <- readr::read_csv(here('data','oasis_cross-sectional.csv'))
ui <- fluidPage(
selectInput("nWBVMin", "Lower bound of normalized brain volume on first visit", choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82")),
selectInput("nWBVMax", "Upper bound of normalized brain volume on first visit",    choices=c("0.7","0.72","0.74","0.76","0.78","0.8","0.82","0.84")),
selectInput("AgeMin", "Select Age Min", choices = c("50", "60", "70", "80")),
selectInput("AgeMax", "Select Age Max", choices = c("50", "60", "70", "80", "90")),
textOutput("result")
)
server <- function(input, output, session) {
numpatients <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBVMin & nWBV<= input$nWBVMax) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax)%>%
nrow()
})
numdemented <-  reactive({longitudinal %>%
filter(Visit==1) %>%
filter(nWBV>=input$nWBVMin & nWBV<= input$nWBVMax) %>%
filter(Age>=input$AgeMin & Age<= input$AgeMax) %>%
filter(Group=='Demented' | Group == 'Converted') %>%
nrow()
})
output$result <- renderText({
c(numpatients(),"patients meet listed search criteria, out of which", numdemented(), "have dementia or approximately", round((numdemented()/numpatients())*100), "% of the sample")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny); runApp('sudevapp.R')
